{"version":3,"sources":["components/applicantCard/index.jsx","components/Modal/index.jsx","components/Form/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ApplicationCard","props","className","src","img","alt","firstName","lastName","occupation","ssn","onClick","linkUpdateForm","id","showModal","Modal","this","show","children","removeApplicant","onClose","React","Component","Form","value","name","onChange","handleInputChange","type","placeholder","sortForUpdate","showHome","Applicant","state","applicants","form","home","showForm","e","setState","filter","applicant","event","preventDefault","addApplicant","newApplicant","newId","length","newApplicants","concat","target","style","display","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83425305.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n// Application card will display the applicants in a uniform way\r\nfunction ApplicationCard(props) { // props from app.js will provide data to fill the cards\r\n    return (\r\n        // card to hold the information in\r\n        <div className=\"card\">\r\n\r\n            <img src={props.img} alt=\"applicants\" />\r\n\r\n            <div className=\"info\">\r\n                <ul>\r\n                    {/* passing in props(the information passed down from App.js) */}\r\n                    <li>First Name: {props.firstName}</li>\r\n                    <li>Last Name: {props.lastName}</li>\r\n                    <li>Occupation: {props.occupation}</li>\r\n                    <li>SSN: {props.ssn}</li>\r\n                </ul>\r\n\r\n\r\n\r\n                <button className=\"cardBtn\" onClick={() => props.linkUpdateForm(props)}>Update</button>\r\n\r\n\r\n\r\n                <button className=\"cardBtn\" onClick={id => props.showModal(props.id, props.firstName, props.lastName)}> Remove</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApplicationCard;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\nclass Modal extends React.Component {\r\n  render(props) {\r\n    // this will not render the component if the state is false\r\n    if (!this.props.show) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"modal\" id=\"modal\">\r\n        <div className=\"content\">{this.props.children}</div>\r\n        <div className=\"actions\">\r\n          <button onClick={() => this.props.removeApplicant()}>remove</button>\r\n          <button onClick={() => this.props.onClose()}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Modal","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction Form(props) {\r\n    return (\r\n        <>\r\n            <form className=\"form\">\r\n                <input\r\n                    value={props.firstName} //the default value is grabbed\r\n                    name=\"firstName\"        //name of this input\r\n                    onChange={props.handleInputChange}  //allows input to update immediately,so input box can be typed in\r\n                    type=\"text\"             //type of thing that will be typed in \r\n                    placeholder=\"First Name\"    //what appears as a placeholder in the input\r\n                />\r\n                <input\r\n                    value={props.lastName}\r\n                    name=\"lastName\"\r\n                    onChange={props.handleInputChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Last Name\"\r\n                />\r\n                <input\r\n                    value={props.occupation}\r\n                    name=\"occupation\"\r\n                    onChange={props.handleInputChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Occupation\"\r\n                />\r\n                <input\r\n                    value={props.ssn}\r\n                    name=\"ssn\"\r\n                    onChange={props.handleInputChange}\r\n                    type=\"number\"\r\n                    placeholder=\"SSN\"\r\n                />\r\n                <input\r\n                    value={props.img}\r\n                    name=\"img\"\r\n                    onChange={props.handleInputChange}\r\n                    type=\"text\"\r\n                    placeholder=\"Image URL(Optional)\"\r\n                />\r\n\r\n                {/* will call the sortUpdate function */}\r\n                <button className=\"btn\" onClick={props.sortForUpdate}>update/add</button>   \r\n            </form>\r\n            {/* calls the showHome function Note: outside of the form because it automatically was called to refresh page */}\r\n            <button className=\"btn\" onClick={props.showHome}>Cancel</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form","import './App.css';\nimport React from \"react\";\nimport applicants from \"./applicants.json\"\nimport ApplicationCard from \"./components/applicantCard\"\nimport Modal from \"./components/Modal\"\nimport Form from \"./components/Form\"\n\n\nclass Applicant extends React.Component {\n  // Setting the state \n  state = {\n    applicants,     // applicants in the applicant json file\n    show: false,    //to show the modal or not\n    id: null,       // recieves id of the applicant selected to be removed/updated/added\n    firstName: \"\",  // recieves name of the applicant selected to be removed/updated/added\n    lastName: \"\",\n    occupation: \"\",\n    ssn: \"\",\n    img: \"https://militaryhealthinstitute.org/wp-content/uploads/sites/37/2019/10/blank-person-icon-9.jpg\",\n    form: \"none\",\n    home: \"inline-block\"\n  };\n  //------------------------- Shows the form or the homepage-------------------->\n  showForm = e => {\n    this.setState({\n      form: \"inline\",\n      home: \"none\"\n    })\n  };\n  showHome = e => {\n    this.setState({\n      form: \"none\",\n      home: \"inline-block\"\n    })\n  };\n\n  // ------------------------this is the Modal--------------------------------//\n  showModal = (id, firstName, lastName) => {\n    this.setState({\n      show: true,     // set modal to true so the modal shows\n      id: id,     // sets id of the applicant clicked\n      firstName: firstName,  // Sets firstname of applicant clicked\n      lastName: lastName\n    });\n  };\n  onClose = e => {\n    this.setState({\n      show: false   // set modal to false to hide it\n    });\n  };\n\n  //----------------------------------Remove Applicant-------------------------//\n  removeApplicant = e => {\n    // filtering through the applicants id's, and showing only the id's not equal to the applicants removed.\n    const applicants = this.state.applicants.filter(applicant => applicant.id !== this.state.id);\n\n    this.setState({ applicants })   // this will set the state to the new filtered array we have above\n\n    this.onClose()  // call the onClose function to close the modal after removing applicant.\n  };\n\n  //--------------------------------------Udpate Section----------------------->\n  linkUpdateForm = props => { // sets the state to applicant selected to update, then shows form\n    this.setState({\n      id: props.id,\n      firstName: props.firstName,\n      lastName: props.lastName,\n      occupation: props.occupation,\n      ssn: props.ssn,\n      img: props.img\n    }, () => {    //callback funtion allows time for state to udate before function is called\n      this.showForm()\n    });\n  };\n\n  sortForUpdate = event => {  // will determine if button is an update or adding\n    event.preventDefault();   // doesn't let the page reload on click\n\n    // filtering through the applicants id's, and showing only the id's not equal to the applicants removed.\n    const applicants = this.state.applicants.filter(applicant => applicant.id !== this.state.id);\n\n    // updates applicants by remmoving the id selected\n    this.setState({ applicants }, () => {\n      this.addApplicant() // then calls addApplicant to add the updated person\n    });\n  }\n\n  //--------------------------New applicants and Add/update button---------------------// \n  newApplicant = e => {   // resets inputs so user can put in new applicant\n    let newId = this.state.applicants.length + 1  // gives this new applicant a unique id\n    this.setState({\n      id: newId,\n      firstName: \"\",\n      lastName: \"\",\n      occupation: \"\",\n      ssn: \"\",\n      img: \"https://militaryhealthinstitute.org/wp-content/uploads/sites/37/2019/10/blank-person-icon-9.jpg\",\n    })\n    this.showForm()   // shows input Form\n  };\n\n  addApplicant = e => {\n    // sets newApplicants = to the applicantions list plus the applicant set in state\n    const newApplicants = this.state.applicants.concat(\n      [{\n        id: this.state.id,\n        firstName: this.state.firstName,\n        lastName: this.state.lastName,\n        occupation: this.state.occupation,\n        ssn: this.state.ssn,\n        img: this.state.img\n      }])\n\n    this.setState({             // sets the applicants to newApplicants \n      applicants: newApplicants\n    })\n\n    this.showHome()     // shows the home\n  }\n\n\n\n  //this function allows the input to update immediately \n  handleInputChange = e => {\n    // getting the value and name of the input that caused the change\n    const { name, value } = e.target;\n    // setting state to the new values\n    this.setState({\n      [name]: value\n    });\n  }\n\n\n  //This will bring all the components together and render them on the browser\n  render() {\n    return (\n      <>\n        <h1>Applicants for Roostify</h1>\n\n        {/* allows this div to be shown or not  */}\n        <div style={{ display: this.state.home }}>\n          {/* passing information to the modal, so the modal can access these functions  */}\n          <Modal\n            onClose={this.onClose}\n            show={this.state.show}    // sends the show state to the modal page\n            removeApplicant={this.removeApplicant}  // passes the removeapplicant function\n          >Are you sure you would like to remove {this.state.firstName} from the list?</Modal>\n\n          {/* Run through all the tasks I set inside it for every applicant in the json*/}\n          {this.state.applicants.map(applicant =>\n            <ApplicationCard    // sending information to the application card file through props\n              id={applicant.id}\n              firstName={applicant.firstName}\n              lastName={applicant.lastName}\n              occupation={applicant.occupation}\n              ssn={applicant.ssn}\n              img={applicant.img}\n              showModal={this.showModal}              // passes the showmodal function\n              linkUpdateForm={this.linkUpdateForm}  // passes the update applicant function              \n            />\n          )}\n\n          <button className=\"btn\" onClick={this.newApplicant}>Add Applicant</button>   {/* this button will show you the form */}\n        </div>\n\n\n        {/* allows this div to be shown or not  */}\n        <div style={{ display: this.state.form }}>\n          <Form\n            firstName={this.state.firstName}\n            lastName={this.state.lastName}\n            occupation={this.state.occupation}\n            ssn={this.state.ssn}\n            img={this.state.img}\n            handleInputChange={this.handleInputChange}\n            sortForUpdate={this.sortForUpdate}\n            showHome={this.showHome}\n          />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Applicant;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}